// Package model contains the types for schema 'public'.
package model

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"fmt"

	"github.com/lib/pq"
)

// Block represents a row from 'public.blocks'.
type Block struct {
	ID              int64          `json:"id"`               // id
	ChainID         sql.NullString `json:"chain_id"`         // chain_id
	Height          sql.NullInt64  `json:"height"`           // height
	NumTxs          sql.NullInt64  `json:"num_txs"`          // num_txs
	TotalTxs        sql.NullInt64  `json:"total_txs"`        // total_txs
	DataHash        sql.NullString `json:"data_hash"`        // data_hash
	ValidatorsHash  sql.NullString `json:"validators_hash"`  // validators_hash
	Time            pq.NullTime    `json:"time"`             // time
	CreatedAt       pq.NullTime    `json:"created_at"`       // created_at
	ValidatorsNum   sql.NullInt64  `json:"validators_num"`   // validators_num
	ValidatorsTotal sql.NullInt64  `json:"validators_total"` // validators_total

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Block exists in the database.
func (b *Block) Exists() bool {
	return b._exists
}

// Deleted provides information if the Block has been deleted from the database.
func (b *Block) Deleted() bool {
	return b._deleted
}

// Insert inserts the Block to the database.
func (b *Block) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if b._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.blocks (` +
		`chain_id, height, num_txs, total_txs, data_hash, validators_hash, time, created_at, validators_num, validators_total` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, b.ChainID, b.Height, b.NumTxs, b.TotalTxs, b.DataHash, b.ValidatorsHash, b.Time, b.CreatedAt, b.ValidatorsNum, b.ValidatorsTotal)
	err = db.QueryRow(sqlstr, b.ChainID, b.Height, b.NumTxs, b.TotalTxs, b.DataHash, b.ValidatorsHash, b.Time, b.CreatedAt, b.ValidatorsNum, b.ValidatorsTotal).Scan(&b.ID)
	if err != nil {
		return err
	}

	// set existence
	b._exists = true

	return nil
}

// Update updates the Block in the database.
func (b *Block) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !b._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if b._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.blocks SET (` +
		`chain_id, height, num_txs, total_txs, data_hash, validators_hash, time, created_at, validators_num, validators_total` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) WHERE id = $11`

	// run query
	XOLog(sqlstr, b.ChainID, b.Height, b.NumTxs, b.TotalTxs, b.DataHash, b.ValidatorsHash, b.Time, b.CreatedAt, b.ValidatorsNum, b.ValidatorsTotal, b.ID)
	_, err = db.Exec(sqlstr, b.ChainID, b.Height, b.NumTxs, b.TotalTxs, b.DataHash, b.ValidatorsHash, b.Time, b.CreatedAt, b.ValidatorsNum, b.ValidatorsTotal, b.ID)
	return err
}

// Save saves the Block to the database.
func (b *Block) Save(db XODB) error {
	if b.Exists() {
		return b.Update(db)
	}

	return b.Insert(db)
}

// Upsert performs an upsert for Block.
//
// NOTE: PostgreSQL 9.5+ only
func (b *Block) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if b._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.blocks (` +
		`id, chain_id, height, num_txs, total_txs, data_hash, validators_hash, time, created_at, validators_num, validators_total` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, chain_id, height, num_txs, total_txs, data_hash, validators_hash, time, created_at, validators_num, validators_total` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.chain_id, EXCLUDED.height, EXCLUDED.num_txs, EXCLUDED.total_txs, EXCLUDED.data_hash, EXCLUDED.validators_hash, EXCLUDED.time, EXCLUDED.created_at, EXCLUDED.validators_num, EXCLUDED.validators_total` +
		`)`

	// run query
	XOLog(sqlstr, b.ID, b.ChainID, b.Height, b.NumTxs, b.TotalTxs, b.DataHash, b.ValidatorsHash, b.Time, b.CreatedAt, b.ValidatorsNum, b.ValidatorsTotal)
	_, err = db.Exec(sqlstr, b.ID, b.ChainID, b.Height, b.NumTxs, b.TotalTxs, b.DataHash, b.ValidatorsHash, b.Time, b.CreatedAt, b.ValidatorsNum, b.ValidatorsTotal)
	if err != nil {
		return err
	}

	// set existence
	b._exists = true

	return nil
}

// Delete deletes the Block from the database.
func (b *Block) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !b._exists {
		return nil
	}

	// if deleted, bail
	if b._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.blocks WHERE id = $1`

	// run query
	XOLog(sqlstr, b.ID)
	_, err = db.Exec(sqlstr, b.ID)
	if err != nil {
		return err
	}

	// set deleted
	b._deleted = true

	return nil
}

// BlocksQuery returns offset-limit rows from 'public.blocks' filte by filter,
// ordered by "id" in descending order.
func BlockFilter(db XODB, filter string, offset, limit int64) ([]*Block, error) {
	sqlstr := `SELECT ` +
		`id, chain_id, height, num_txs, total_txs, data_hash, validators_hash, time, created_at, validators_num, validators_total` +
		` FROM public.blocks `

	if filter != "" {
		sqlstr = sqlstr + " WHERE " + filter
	}

	if limit > 0 {
		sqlstr = sqlstr + fmt.Sprintf(" offset %d limit %d", offset, limit)
	}

	XOLog(sqlstr)
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*Block
	for q.Next() {
		b := Block{}

		// scan
		err = q.Scan(&b.ID, &b.ChainID, &b.Height, &b.NumTxs, &b.TotalTxs, &b.DataHash, &b.ValidatorsHash, &b.Time, &b.CreatedAt, &b.ValidatorsNum, &b.ValidatorsTotal)
		if err != nil {
			return nil, err
		}

		res = append(res, &b)
	}

	return res, nil
}

// BlockByChainIDHeight retrieves a row from 'public.blocks' as a Block.
//
// Generated from index 'blocks_chain_id_height_idx'.
func BlockByChainIDHeight(db XODB, chainID sql.NullString, height sql.NullInt64) (*Block, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, chain_id, height, num_txs, total_txs, data_hash, validators_hash, time, created_at, validators_num, validators_total ` +
		`FROM public.blocks ` +
		`WHERE chain_id = $1 AND height = $2`

	// run query
	XOLog(sqlstr, chainID, height)
	b := Block{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, chainID, height).Scan(&b.ID, &b.ChainID, &b.Height, &b.NumTxs, &b.TotalTxs, &b.DataHash, &b.ValidatorsHash, &b.Time, &b.CreatedAt, &b.ValidatorsNum, &b.ValidatorsTotal)
	if err != nil {
		return nil, err
	}

	return &b, nil
}

// BlocksByChainID retrieves a row from 'public.blocks' as a Block.
//
// Generated from index 'blocks_chain_id_idx'.
func BlocksByChainID(db XODB, chainID sql.NullString) ([]*Block, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, chain_id, height, num_txs, total_txs, data_hash, validators_hash, time, created_at, validators_num, validators_total ` +
		`FROM public.blocks ` +
		`WHERE chain_id = $1`

	// run query
	XOLog(sqlstr, chainID)
	q, err := db.Query(sqlstr, chainID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Block{}
	for q.Next() {
		b := Block{
			_exists: true,
		}

		// scan
		err = q.Scan(&b.ID, &b.ChainID, &b.Height, &b.NumTxs, &b.TotalTxs, &b.DataHash, &b.ValidatorsHash, &b.Time, &b.CreatedAt, &b.ValidatorsNum, &b.ValidatorsTotal)
		if err != nil {
			return nil, err
		}

		res = append(res, &b)
	}

	return res, nil
}

// BlockByID retrieves a row from 'public.blocks' as a Block.
//
// Generated from index 'blocks_pkey'.
func BlockByID(db XODB, id int64) (*Block, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, chain_id, height, num_txs, total_txs, data_hash, validators_hash, time, created_at, validators_num, validators_total ` +
		`FROM public.blocks ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	b := Block{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&b.ID, &b.ChainID, &b.Height, &b.NumTxs, &b.TotalTxs, &b.DataHash, &b.ValidatorsHash, &b.Time, &b.CreatedAt, &b.ValidatorsNum, &b.ValidatorsTotal)
	if err != nil {
		return nil, err
	}

	return &b, nil
}
