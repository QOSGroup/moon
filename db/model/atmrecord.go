// Package model contains the types for schema 'public'.
package model

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"fmt"

	"github.com/lib/pq"
)

// AtmRecord represents a row from 'public.atm_record'.
type AtmRecord struct {
	ID       int64          `json:"id"`       // id
	Address  sql.NullString `json:"address"`  // address
	Chainid  sql.NullString `json:"chainid"`  // chainid
	Coin     sql.NullString `json:"coin"`     // coin
	Amount   sql.NullString `json:"amount"`   // amount
	Height   sql.NullString `json:"height"`   // height
	Hash     sql.NullString `json:"hash"`     // hash
	Createat pq.NullTime    `json:"createat"` // createat

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AtmRecord exists in the database.
func (ar *AtmRecord) Exists() bool {
	return ar._exists
}

// Deleted provides information if the AtmRecord has been deleted from the database.
func (ar *AtmRecord) Deleted() bool {
	return ar._deleted
}

// Insert inserts the AtmRecord to the database.
func (ar *AtmRecord) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ar._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.atm_record (` +
		`address, chainid, coin, amount, height, hash, createat` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, ar.Address, ar.Chainid, ar.Coin, ar.Amount, ar.Height, ar.Hash, ar.Createat)
	err = db.QueryRow(sqlstr, ar.Address, ar.Chainid, ar.Coin, ar.Amount, ar.Height, ar.Hash, ar.Createat).Scan(&ar.ID)
	if err != nil {
		return err
	}

	// set existence
	ar._exists = true

	return nil
}

// Update updates the AtmRecord in the database.
func (ar *AtmRecord) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ar._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ar._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.atm_record SET (` +
		`address, chainid, coin, amount, height, hash, createat` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) WHERE id = $8`

	// run query
	XOLog(sqlstr, ar.Address, ar.Chainid, ar.Coin, ar.Amount, ar.Height, ar.Hash, ar.Createat, ar.ID)
	_, err = db.Exec(sqlstr, ar.Address, ar.Chainid, ar.Coin, ar.Amount, ar.Height, ar.Hash, ar.Createat, ar.ID)
	return err
}

// Save saves the AtmRecord to the database.
func (ar *AtmRecord) Save(db XODB) error {
	if ar.Exists() {
		return ar.Update(db)
	}

	return ar.Insert(db)
}

// Upsert performs an upsert for AtmRecord.
//
// NOTE: PostgreSQL 9.5+ only
func (ar *AtmRecord) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if ar._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.atm_record (` +
		`id, address, chainid, coin, amount, height, hash, createat` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, address, chainid, coin, amount, height, hash, createat` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.address, EXCLUDED.chainid, EXCLUDED.coin, EXCLUDED.amount, EXCLUDED.height, EXCLUDED.hash, EXCLUDED.createat` +
		`)`

	// run query
	XOLog(sqlstr, ar.ID, ar.Address, ar.Chainid, ar.Coin, ar.Amount, ar.Height, ar.Hash, ar.Createat)
	_, err = db.Exec(sqlstr, ar.ID, ar.Address, ar.Chainid, ar.Coin, ar.Amount, ar.Height, ar.Hash, ar.Createat)
	if err != nil {
		return err
	}

	// set existence
	ar._exists = true

	return nil
}

// Delete deletes the AtmRecord from the database.
func (ar *AtmRecord) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ar._exists {
		return nil
	}

	// if deleted, bail
	if ar._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.atm_record WHERE id = $1`

	// run query
	XOLog(sqlstr, ar.ID)
	_, err = db.Exec(sqlstr, ar.ID)
	if err != nil {
		return err
	}

	// set deleted
	ar._deleted = true

	return nil
}

// AtmRecordsQuery returns offset-limit rows from 'public.atm_record' filte by filter,
// ordered by "id" in descending order.
func AtmRecordFilter(db XODB, filter, sort string, offset, limit int64) ([]*AtmRecord, error) {
	sqlstr := `SELECT ` +
		`id, address, chainid, coin, amount, height, hash, createat` +
		` FROM public.atm_record `

	if filter != "" {
		sqlstr = sqlstr + " WHERE " + filter
	}

	if sort != "" {
		sqlstr = sqlstr + " " + sort
	}

	if limit > 0 {
		sqlstr = sqlstr + fmt.Sprintf(" offset %d limit %d", offset, limit)
	}

	XOLog(sqlstr)
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*AtmRecord
	for q.Next() {
		ar := AtmRecord{
			_exists: true,
		}

		// scan
		err = q.Scan(&ar.ID, &ar.Address, &ar.Chainid, &ar.Coin, &ar.Amount, &ar.Height, &ar.Hash, &ar.Createat)
		if err != nil {
			return nil, err
		}

		res = append(res, &ar)
	}

	return res, nil
}

// AtmRecordByAddressChainidCreateat retrieves a row from 'public.atm_record' as a AtmRecord.
//
// Generated from index 'atm_record_address_chainid_idx'.
func AtmRecordByAddressChainidCreateat(db XODB, address sql.NullString, chainid sql.NullString, createat pq.NullTime) (*AtmRecord, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, address, chainid, coin, amount, height, hash, createat ` +
		`FROM public.atm_record ` +
		`WHERE address = $1 AND chainid = $2 AND createat = $3`

	// run query
	XOLog(sqlstr, address, chainid, createat)
	ar := AtmRecord{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, address, chainid, createat).Scan(&ar.ID, &ar.Address, &ar.Chainid, &ar.Coin, &ar.Amount, &ar.Height, &ar.Hash, &ar.Createat)
	if err != nil {
		return nil, err
	}

	return &ar, nil
}

// AtmRecordByID retrieves a row from 'public.atm_record' as a AtmRecord.
//
// Generated from index 'atm_record_pkey'.
func AtmRecordByID(db XODB, id int64) (*AtmRecord, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, address, chainid, coin, amount, height, hash, createat ` +
		`FROM public.atm_record ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	ar := AtmRecord{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ar.ID, &ar.Address, &ar.Chainid, &ar.Coin, &ar.Amount, &ar.Height, &ar.Hash, &ar.Createat)
	if err != nil {
		return nil, err
	}

	return &ar, nil
}
