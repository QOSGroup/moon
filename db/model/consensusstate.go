// Package model contains the types for schema 'public'.
package model

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"fmt"
)

// ConsensusState represents a row from 'public.consensus_state'.
type ConsensusState struct {
	ID              int64          `json:"id"`               // id
	ChainID         sql.NullString `json:"chain_id"`         // chain_id
	Height          sql.NullString `json:"height"`           // height
	Round           sql.NullString `json:"round"`            // round
	Step            sql.NullString `json:"step"`             // step
	PrevotesNum     sql.NullInt64  `json:"prevotes_num"`     // prevotes_num
	PrevotesValue   sql.NullString `json:"prevotes_value"`   // prevotes_value
	PrecommitsNum   sql.NullInt64  `json:"precommits_num"`   // precommits_num
	PrecommitsValue sql.NullString `json:"precommits_value"` // precommits_value
	StartTime       sql.NullString `json:"start_time"`       // start_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ConsensusState exists in the database.
func (cs *ConsensusState) Exists() bool {
	return cs._exists
}

// Deleted provides information if the ConsensusState has been deleted from the database.
func (cs *ConsensusState) Deleted() bool {
	return cs._deleted
}

// Insert inserts the ConsensusState to the database.
func (cs *ConsensusState) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if cs._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.consensus_state (` +
		`chain_id, height, round, step, prevotes_num, prevotes_value, precommits_num, precommits_value, start_time` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, cs.ChainID, cs.Height, cs.Round, cs.Step, cs.PrevotesNum, cs.PrevotesValue, cs.PrecommitsNum, cs.PrecommitsValue, cs.StartTime)
	err = db.QueryRow(sqlstr, cs.ChainID, cs.Height, cs.Round, cs.Step, cs.PrevotesNum, cs.PrevotesValue, cs.PrecommitsNum, cs.PrecommitsValue, cs.StartTime).Scan(&cs.ID)
	if err != nil {
		return err
	}

	// set existence
	cs._exists = true

	return nil
}

// Update updates the ConsensusState in the database.
func (cs *ConsensusState) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cs._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if cs._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.consensus_state SET (` +
		`chain_id, height, round, step, prevotes_num, prevotes_value, precommits_num, precommits_value, start_time` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) WHERE id = $10`

	// run query
	XOLog(sqlstr, cs.ChainID, cs.Height, cs.Round, cs.Step, cs.PrevotesNum, cs.PrevotesValue, cs.PrecommitsNum, cs.PrecommitsValue, cs.StartTime, cs.ID)
	_, err = db.Exec(sqlstr, cs.ChainID, cs.Height, cs.Round, cs.Step, cs.PrevotesNum, cs.PrevotesValue, cs.PrecommitsNum, cs.PrecommitsValue, cs.StartTime, cs.ID)
	return err
}

// Save saves the ConsensusState to the database.
func (cs *ConsensusState) Save(db XODB) error {
	if cs.Exists() {
		return cs.Update(db)
	}

	return cs.Insert(db)
}

// Upsert performs an upsert for ConsensusState.
//
// NOTE: PostgreSQL 9.5+ only
func (cs *ConsensusState) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if cs._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.consensus_state (` +
		`id, chain_id, height, round, step, prevotes_num, prevotes_value, precommits_num, precommits_value, start_time` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, chain_id, height, round, step, prevotes_num, prevotes_value, precommits_num, precommits_value, start_time` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.chain_id, EXCLUDED.height, EXCLUDED.round, EXCLUDED.step, EXCLUDED.prevotes_num, EXCLUDED.prevotes_value, EXCLUDED.precommits_num, EXCLUDED.precommits_value, EXCLUDED.start_time` +
		`)`

	// run query
	XOLog(sqlstr, cs.ID, cs.ChainID, cs.Height, cs.Round, cs.Step, cs.PrevotesNum, cs.PrevotesValue, cs.PrecommitsNum, cs.PrecommitsValue, cs.StartTime)
	_, err = db.Exec(sqlstr, cs.ID, cs.ChainID, cs.Height, cs.Round, cs.Step, cs.PrevotesNum, cs.PrevotesValue, cs.PrecommitsNum, cs.PrecommitsValue, cs.StartTime)
	if err != nil {
		return err
	}

	// set existence
	cs._exists = true

	return nil
}

// Delete deletes the ConsensusState from the database.
func (cs *ConsensusState) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cs._exists {
		return nil
	}

	// if deleted, bail
	if cs._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.consensus_state WHERE id = $1`

	// run query
	XOLog(sqlstr, cs.ID)
	_, err = db.Exec(sqlstr, cs.ID)
	if err != nil {
		return err
	}

	// set deleted
	cs._deleted = true

	return nil
}

// ConsensusStatesQuery returns offset-limit rows from 'public.consensus_state' filte by filter,
// ordered by "id" in descending order.
func ConsensusStateFilter(db XODB, filter string, offset, limit int64) ([]*ConsensusState, error) {
	sqlstr := `SELECT ` +
		`id, chain_id, height, round, step, prevotes_num, prevotes_value, precommits_num, precommits_value, start_time` +
		` FROM public.consensus_state `

	if filter != "" {
		sqlstr = sqlstr + " WHERE " + filter
	}

	if limit > 0 {
		sqlstr = sqlstr + fmt.Sprintf(" offset %d limit %d", offset, limit)
	}

	XOLog(sqlstr)
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*ConsensusState
	for q.Next() {
		cs := ConsensusState{}

		// scan
		err = q.Scan(&cs.ID, &cs.ChainID, &cs.Height, &cs.Round, &cs.Step, &cs.PrevotesNum, &cs.PrevotesValue, &cs.PrecommitsNum, &cs.PrecommitsValue, &cs.StartTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &cs)
	}

	return res, nil
}

// ConsensusStateByChainID retrieves a row from 'public.consensus_state' as a ConsensusState.
//
// Generated from index 'consensus_state_chain_id_idx'.
func ConsensusStateByChainID(db XODB, chainID sql.NullString) (*ConsensusState, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, chain_id, height, round, step, prevotes_num, prevotes_value, precommits_num, precommits_value, start_time ` +
		`FROM public.consensus_state ` +
		`WHERE chain_id = $1`

	// run query
	XOLog(sqlstr, chainID)
	cs := ConsensusState{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, chainID).Scan(&cs.ID, &cs.ChainID, &cs.Height, &cs.Round, &cs.Step, &cs.PrevotesNum, &cs.PrevotesValue, &cs.PrecommitsNum, &cs.PrecommitsValue, &cs.StartTime)
	if err != nil {
		return nil, err
	}

	return &cs, nil
}

// ConsensusStateByID retrieves a row from 'public.consensus_state' as a ConsensusState.
//
// Generated from index 'consensus_state_pkey'.
func ConsensusStateByID(db XODB, id int64) (*ConsensusState, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, chain_id, height, round, step, prevotes_num, prevotes_value, precommits_num, precommits_value, start_time ` +
		`FROM public.consensus_state ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	cs := ConsensusState{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&cs.ID, &cs.ChainID, &cs.Height, &cs.Round, &cs.Step, &cs.PrevotesNum, &cs.PrevotesValue, &cs.PrecommitsNum, &cs.PrecommitsValue, &cs.StartTime)
	if err != nil {
		return nil, err
	}

	return &cs, nil
}
