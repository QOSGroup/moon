// Package model contains the types for schema 'public'.
package model

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"fmt"

	"github.com/lib/pq"
)

// Node represents a row from 'public.nodes'.
type Node struct {
	ID        int64          `json:"id"`         // id
	Name      sql.NullString `json:"name"`       // name
	BaseURL   sql.NullString `json:"base_url"`   // base_url
	SecretKey sql.NullString `json:"secret_key"` // secret_key
	ChainID   sql.NullString `json:"chain_id"`   // chain_id
	GenesisID sql.NullInt64  `json:"genesis_id"` // genesis_id
	CreatedAt pq.NullTime    `json:"created_at"` // created_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Node exists in the database.
func (n *Node) Exists() bool {
	return n._exists
}

// Deleted provides information if the Node has been deleted from the database.
func (n *Node) Deleted() bool {
	return n._deleted
}

// Insert inserts the Node to the database.
func (n *Node) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if n._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.nodes (` +
		`name, base_url, secret_key, chain_id, genesis_id, created_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, n.Name, n.BaseURL, n.SecretKey, n.ChainID, n.GenesisID, n.CreatedAt)
	err = db.QueryRow(sqlstr, n.Name, n.BaseURL, n.SecretKey, n.ChainID, n.GenesisID, n.CreatedAt).Scan(&n.ID)
	if err != nil {
		return err
	}

	// set existence
	n._exists = true

	return nil
}

// Update updates the Node in the database.
func (n *Node) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !n._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if n._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.nodes SET (` +
		`name, base_url, secret_key, chain_id, genesis_id, created_at` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6` +
		`) WHERE id = $7`

	// run query
	XOLog(sqlstr, n.Name, n.BaseURL, n.SecretKey, n.ChainID, n.GenesisID, n.CreatedAt, n.ID)
	_, err = db.Exec(sqlstr, n.Name, n.BaseURL, n.SecretKey, n.ChainID, n.GenesisID, n.CreatedAt, n.ID)
	return err
}

// Save saves the Node to the database.
func (n *Node) Save(db XODB) error {
	if n.Exists() {
		return n.Update(db)
	}

	return n.Insert(db)
}

// Upsert performs an upsert for Node.
//
// NOTE: PostgreSQL 9.5+ only
func (n *Node) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if n._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.nodes (` +
		`id, name, base_url, secret_key, chain_id, genesis_id, created_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, name, base_url, secret_key, chain_id, genesis_id, created_at` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.name, EXCLUDED.base_url, EXCLUDED.secret_key, EXCLUDED.chain_id, EXCLUDED.genesis_id, EXCLUDED.created_at` +
		`)`

	// run query
	XOLog(sqlstr, n.ID, n.Name, n.BaseURL, n.SecretKey, n.ChainID, n.GenesisID, n.CreatedAt)
	_, err = db.Exec(sqlstr, n.ID, n.Name, n.BaseURL, n.SecretKey, n.ChainID, n.GenesisID, n.CreatedAt)
	if err != nil {
		return err
	}

	// set existence
	n._exists = true

	return nil
}

// Delete deletes the Node from the database.
func (n *Node) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !n._exists {
		return nil
	}

	// if deleted, bail
	if n._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.nodes WHERE id = $1`

	// run query
	XOLog(sqlstr, n.ID)
	_, err = db.Exec(sqlstr, n.ID)
	if err != nil {
		return err
	}

	// set deleted
	n._deleted = true

	return nil
}

// NodesQuery returns offset-limit rows from 'public.nodes' filte by filter,
// ordered by "id" in descending order.
func NodeFilter(db XODB, filter string, offset, limit int64) ([]*Node, error) {
	sqlstr := `SELECT ` +
		`id, name, base_url, secret_key, chain_id, genesis_id, created_at` +
		` FROM public.nodes `

	if filter != "" {
		sqlstr = sqlstr + " WHERE " + filter
	}

	if limit > 0 {
		sqlstr = sqlstr + fmt.Sprintf(" offset %d limit %d", offset, limit)
	}

	XOLog(sqlstr)
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*Node
	for q.Next() {
		n := Node{}

		// scan
		err = q.Scan(&n.ID, &n.Name, &n.BaseURL, &n.SecretKey, &n.ChainID, &n.GenesisID, &n.CreatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &n)
	}

	return res, nil
}

// Genesi returns the Genesi associated with the Node's GenesisID (genesis_id).
//
// Generated from foreign key 'nodes_genesis_id_fkey'.
func (n *Node) Genesi(db XODB) (*Genesi, error) {
	return GenesiByID(db, n.GenesisID.Int64)
}

// NodesByGenesisID retrieves a row from 'public.nodes' as a Node.
//
// Generated from index 'nodes_genesis_id_idx'.
func NodesByGenesisID(db XODB, genesisID sql.NullInt64) ([]*Node, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, base_url, secret_key, chain_id, genesis_id, created_at ` +
		`FROM public.nodes ` +
		`WHERE genesis_id = $1`

	// run query
	XOLog(sqlstr, genesisID)
	q, err := db.Query(sqlstr, genesisID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Node{}
	for q.Next() {
		n := Node{
			_exists: true,
		}

		// scan
		err = q.Scan(&n.ID, &n.Name, &n.BaseURL, &n.SecretKey, &n.ChainID, &n.GenesisID, &n.CreatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &n)
	}

	return res, nil
}

// NodeByName retrieves a row from 'public.nodes' as a Node.
//
// Generated from index 'nodes_name_idx'.
func NodeByName(db XODB, name sql.NullString) (*Node, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, base_url, secret_key, chain_id, genesis_id, created_at ` +
		`FROM public.nodes ` +
		`WHERE name = $1`

	// run query
	XOLog(sqlstr, name)
	n := Node{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, name).Scan(&n.ID, &n.Name, &n.BaseURL, &n.SecretKey, &n.ChainID, &n.GenesisID, &n.CreatedAt)
	if err != nil {
		return nil, err
	}

	return &n, nil
}

// NodeByID retrieves a row from 'public.nodes' as a Node.
//
// Generated from index 'nodes_pkey'.
func NodeByID(db XODB, id int64) (*Node, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, base_url, secret_key, chain_id, genesis_id, created_at ` +
		`FROM public.nodes ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	n := Node{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&n.ID, &n.Name, &n.BaseURL, &n.SecretKey, &n.ChainID, &n.GenesisID, &n.CreatedAt)
	if err != nil {
		return nil, err
	}

	return &n, nil
}
