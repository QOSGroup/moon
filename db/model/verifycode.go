// Package model contains the types for schema 'public'.
package model

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"fmt"

	"github.com/lib/pq"
)

// VerifyCode represents a row from 'public.verify_code'.
type VerifyCode struct {
	ID        int64          `json:"id"`         // id
	Email     sql.NullString `json:"email"`      // email
	Code      sql.NullString `json:"code"`       // code
	CreatedAt pq.NullTime    `json:"created_at"` // created_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the VerifyCode exists in the database.
func (vc *VerifyCode) Exists() bool {
	return vc._exists
}

// Deleted provides information if the VerifyCode has been deleted from the database.
func (vc *VerifyCode) Deleted() bool {
	return vc._deleted
}

// Insert inserts the VerifyCode to the database.
func (vc *VerifyCode) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if vc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.verify_code (` +
		`email, code, created_at` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, vc.Email, vc.Code, vc.CreatedAt)
	err = db.QueryRow(sqlstr, vc.Email, vc.Code, vc.CreatedAt).Scan(&vc.ID)
	if err != nil {
		return err
	}

	// set existence
	vc._exists = true

	return nil
}

// Update updates the VerifyCode in the database.
func (vc *VerifyCode) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vc._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if vc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.verify_code SET (` +
		`email, code, created_at` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE id = $4`

	// run query
	XOLog(sqlstr, vc.Email, vc.Code, vc.CreatedAt, vc.ID)
	_, err = db.Exec(sqlstr, vc.Email, vc.Code, vc.CreatedAt, vc.ID)
	return err
}

// Save saves the VerifyCode to the database.
func (vc *VerifyCode) Save(db XODB) error {
	if vc.Exists() {
		return vc.Update(db)
	}

	return vc.Insert(db)
}

// Upsert performs an upsert for VerifyCode.
//
// NOTE: PostgreSQL 9.5+ only
func (vc *VerifyCode) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if vc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.verify_code (` +
		`id, email, code, created_at` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, email, code, created_at` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.email, EXCLUDED.code, EXCLUDED.created_at` +
		`)`

	// run query
	XOLog(sqlstr, vc.ID, vc.Email, vc.Code, vc.CreatedAt)
	_, err = db.Exec(sqlstr, vc.ID, vc.Email, vc.Code, vc.CreatedAt)
	if err != nil {
		return err
	}

	// set existence
	vc._exists = true

	return nil
}

// Delete deletes the VerifyCode from the database.
func (vc *VerifyCode) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vc._exists {
		return nil
	}

	// if deleted, bail
	if vc._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.verify_code WHERE id = $1`

	// run query
	XOLog(sqlstr, vc.ID)
	_, err = db.Exec(sqlstr, vc.ID)
	if err != nil {
		return err
	}

	// set deleted
	vc._deleted = true

	return nil
}

// VerifyCodesQuery returns offset-limit rows from 'public.verify_code' filte by filter,
// ordered by "id" in descending order.
func VerifyCodeFilter(db XODB, filter string, offset, limit int64) ([]*VerifyCode, error) {
	sqlstr := `SELECT ` +
		`id, email, code, created_at` +
		` FROM public.verify_code `

	if filter != "" {
		sqlstr = sqlstr + " WHERE " + filter
	}

	if limit > 0 {
		sqlstr = sqlstr + fmt.Sprintf(" offset %d limit %d", offset, limit)
	}

	XOLog(sqlstr)
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*VerifyCode
	for q.Next() {
		vc := VerifyCode{}

		// scan
		err = q.Scan(&vc.ID, &vc.Email, &vc.Code, &vc.CreatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &vc)
	}

	return res, nil
}

// VerifyCodeByID retrieves a row from 'public.verify_code' as a VerifyCode.
//
// Generated from index 'verify_code_pkey'.
func VerifyCodeByID(db XODB, id int64) (*VerifyCode, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, email, code, created_at ` +
		`FROM public.verify_code ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	vc := VerifyCode{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&vc.ID, &vc.Email, &vc.Code, &vc.CreatedAt)
	if err != nil {
		return nil, err
	}

	return &vc, nil
}

// VerifyCodeByEmail retrieves a row from 'public.verify_code' as a VerifyCode.
//
// Generated from index 'verify_email_idx'.
func VerifyCodeByEmail(db XODB, email sql.NullString) (*VerifyCode, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, email, code, created_at ` +
		`FROM public.verify_code ` +
		`WHERE email = $1`

	// run query
	XOLog(sqlstr, email)
	vc := VerifyCode{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, email).Scan(&vc.ID, &vc.Email, &vc.Code, &vc.CreatedAt)
	if err != nil {
		return nil, err
	}

	return &vc, nil
}
