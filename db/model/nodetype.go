// Package model contains the types for schema 'public'.
package model

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// NodeType represents a row from 'public.node_types'.
type NodeType struct {
	ID        int64          `json:"id"`         // id
	Name      sql.NullString `json:"name"`       // name
	BaseURL   sql.NullString `json:"base_url"`   // base_url
	SecretKey sql.NullString `json:"secret_key"` // secret_key
	CreatedAt pq.NullTime    `json:"created_at"` // created_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the NodeType exists in the database.
func (nt *NodeType) Exists() bool {
	return nt._exists
}

// Deleted provides information if the NodeType has been deleted from the database.
func (nt *NodeType) Deleted() bool {
	return nt._deleted
}

// Insert inserts the NodeType to the database.
func (nt *NodeType) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if nt._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.node_types (` +
		`name, base_url, secret_key, created_at` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, nt.Name, nt.BaseURL, nt.SecretKey, nt.CreatedAt)
	err = db.QueryRow(sqlstr, nt.Name, nt.BaseURL, nt.SecretKey, nt.CreatedAt).Scan(&nt.ID)
	if err != nil {
		return err
	}

	// set existence
	nt._exists = true

	return nil
}

// Update updates the NodeType in the database.
func (nt *NodeType) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !nt._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if nt._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.node_types SET (` +
		`name, base_url, secret_key, created_at` +
		`) = ( ` +
		`$1, $2, $3, $4` +
		`) WHERE id = $5`

	// run query
	XOLog(sqlstr, nt.Name, nt.BaseURL, nt.SecretKey, nt.CreatedAt, nt.ID)
	_, err = db.Exec(sqlstr, nt.Name, nt.BaseURL, nt.SecretKey, nt.CreatedAt, nt.ID)
	return err
}

// Save saves the NodeType to the database.
func (nt *NodeType) Save(db XODB) error {
	if nt.Exists() {
		return nt.Update(db)
	}

	return nt.Insert(db)
}

// Upsert performs an upsert for NodeType.
//
// NOTE: PostgreSQL 9.5+ only
func (nt *NodeType) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if nt._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.node_types (` +
		`id, name, base_url, secret_key, created_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, name, base_url, secret_key, created_at` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.name, EXCLUDED.base_url, EXCLUDED.secret_key, EXCLUDED.created_at` +
		`)`

	// run query
	XOLog(sqlstr, nt.ID, nt.Name, nt.BaseURL, nt.SecretKey, nt.CreatedAt)
	_, err = db.Exec(sqlstr, nt.ID, nt.Name, nt.BaseURL, nt.SecretKey, nt.CreatedAt)
	if err != nil {
		return err
	}

	// set existence
	nt._exists = true

	return nil
}

// Delete deletes the NodeType from the database.
func (nt *NodeType) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !nt._exists {
		return nil
	}

	// if deleted, bail
	if nt._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.node_types WHERE id = $1`

	// run query
	XOLog(sqlstr, nt.ID)
	_, err = db.Exec(sqlstr, nt.ID)
	if err != nil {
		return err
	}

	// set deleted
	nt._deleted = true

	return nil
}

// NodeTypesQuery returns offset-limit rows from 'public.node_types' filte by filter,
// ordered by "id" in descending order.
func NodeTypeFilter(db XODB, filter string, offset, limit int64) ([]*NodeType, error) {
	sqlstr := `SELECT ` +
		`id, name, base_url, secret_key, created_at` +
		` FROM public.node_types `

	if filter != "" {
		sqlstr = sqlstr + " WHERE " + filter
	}

	sqlstr = sqlstr + " order by id desc offset $1 limit $2"

	XOLog(sqlstr, offset, limit)
	q, err := db.Query(sqlstr, offset, limit)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*NodeType
	for q.Next() {
		nt := NodeType{}

		// scan
		err = q.Scan(&nt.ID, &nt.Name, &nt.BaseURL, &nt.SecretKey, &nt.CreatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &nt)
	}

	return res, nil
} // NodeTypeByName retrieves a row from 'public.node_types' as a NodeType.
//
// Generated from index 'node_types_name_idx'.
func NodeTypeByName(db XODB, name sql.NullString) (*NodeType, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, base_url, secret_key, created_at ` +
		`FROM public.node_types ` +
		`WHERE name = $1`

	// run query
	XOLog(sqlstr, name)
	nt := NodeType{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, name).Scan(&nt.ID, &nt.Name, &nt.BaseURL, &nt.SecretKey, &nt.CreatedAt)
	if err != nil {
		return nil, err
	}

	return &nt, nil
}

// NodeTypeByID retrieves a row from 'public.node_types' as a NodeType.
//
// Generated from index 'node_types_pkey'.
func NodeTypeByID(db XODB, id int64) (*NodeType, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, base_url, secret_key, created_at ` +
		`FROM public.node_types ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	nt := NodeType{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&nt.ID, &nt.Name, &nt.BaseURL, &nt.SecretKey, &nt.CreatedAt)
	if err != nil {
		return nil, err
	}

	return &nt, nil
}
