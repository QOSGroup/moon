// Package model contains the types for schema 'public'.
package model

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"fmt"

	"github.com/lib/pq"
)

// LoginStatus represents a row from 'public.login_status'.
type LoginStatus struct {
	ID        int64          `json:"id"`         // id
	AccountID sql.NullInt64  `json:"account_id"` // account_id
	LoginType sql.NullInt64  `json:"login_type"` // login_type
	Token     sql.NullString `json:"token"`      // token
	ExpiredAt pq.NullTime    `json:"expired_at"` // expired_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the LoginStatus exists in the database.
func (ls *LoginStatus) Exists() bool {
	return ls._exists
}

// Deleted provides information if the LoginStatus has been deleted from the database.
func (ls *LoginStatus) Deleted() bool {
	return ls._deleted
}

// Insert inserts the LoginStatus to the database.
func (ls *LoginStatus) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ls._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.login_status (` +
		`account_id, login_type, token, expired_at` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, ls.AccountID, ls.LoginType, ls.Token, ls.ExpiredAt)
	err = db.QueryRow(sqlstr, ls.AccountID, ls.LoginType, ls.Token, ls.ExpiredAt).Scan(&ls.ID)
	if err != nil {
		return err
	}

	// set existence
	ls._exists = true

	return nil
}

// Update updates the LoginStatus in the database.
func (ls *LoginStatus) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ls._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ls._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.login_status SET (` +
		`account_id, login_type, token, expired_at` +
		`) = ( ` +
		`$1, $2, $3, $4` +
		`) WHERE id = $5`

	// run query
	XOLog(sqlstr, ls.AccountID, ls.LoginType, ls.Token, ls.ExpiredAt, ls.ID)
	_, err = db.Exec(sqlstr, ls.AccountID, ls.LoginType, ls.Token, ls.ExpiredAt, ls.ID)
	return err
}

// Save saves the LoginStatus to the database.
func (ls *LoginStatus) Save(db XODB) error {
	if ls.Exists() {
		return ls.Update(db)
	}

	return ls.Insert(db)
}

// Upsert performs an upsert for LoginStatus.
//
// NOTE: PostgreSQL 9.5+ only
func (ls *LoginStatus) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if ls._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.login_status (` +
		`id, account_id, login_type, token, expired_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, account_id, login_type, token, expired_at` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.account_id, EXCLUDED.login_type, EXCLUDED.token, EXCLUDED.expired_at` +
		`)`

	// run query
	XOLog(sqlstr, ls.ID, ls.AccountID, ls.LoginType, ls.Token, ls.ExpiredAt)
	_, err = db.Exec(sqlstr, ls.ID, ls.AccountID, ls.LoginType, ls.Token, ls.ExpiredAt)
	if err != nil {
		return err
	}

	// set existence
	ls._exists = true

	return nil
}

// Delete deletes the LoginStatus from the database.
func (ls *LoginStatus) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ls._exists {
		return nil
	}

	// if deleted, bail
	if ls._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.login_status WHERE id = $1`

	// run query
	XOLog(sqlstr, ls.ID)
	_, err = db.Exec(sqlstr, ls.ID)
	if err != nil {
		return err
	}

	// set deleted
	ls._deleted = true

	return nil
}

// LoginStatussQuery returns offset-limit rows from 'public.login_status' filte by filter,
// ordered by "id" in descending order.
func LoginStatusFilter(db XODB, filter, sort string, offset, limit int64) ([]*LoginStatus, error) {
	sqlstr := `SELECT ` +
		`id, account_id, login_type, token, expired_at` +
		` FROM public.login_status `

	if filter != "" {
		sqlstr = sqlstr + " WHERE " + filter
	}

	if sort != "" {
		sqlstr = sqlstr + " " + sort
	}

	if limit > 0 {
		sqlstr = sqlstr + fmt.Sprintf(" offset %d limit %d", offset, limit)
	}

	XOLog(sqlstr)
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*LoginStatus
	for q.Next() {
		ls := LoginStatus{
			_exists: true,
		}

		// scan
		err = q.Scan(&ls.ID, &ls.AccountID, &ls.LoginType, &ls.Token, &ls.ExpiredAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &ls)
	}

	return res, nil
}

// Account returns the Account associated with the LoginStatus's AccountID (account_id).
//
// Generated from foreign key 'login_status_account_id_fkey'.
func (ls *LoginStatus) Account(db XODB) (*Account, error) {
	return AccountByID(db, ls.AccountID.Int64)
}

// LoginStatusByAccountID retrieves a row from 'public.login_status' as a LoginStatus.
//
// Generated from index 'login_status_account_id_idx'.
func LoginStatusByAccountID(db XODB, accountID sql.NullInt64) (*LoginStatus, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, account_id, login_type, token, expired_at ` +
		`FROM public.login_status ` +
		`WHERE account_id = $1`

	// run query
	XOLog(sqlstr, accountID)
	ls := LoginStatus{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, accountID).Scan(&ls.ID, &ls.AccountID, &ls.LoginType, &ls.Token, &ls.ExpiredAt)
	if err != nil {
		return nil, err
	}

	return &ls, nil
}

// LoginStatusByID retrieves a row from 'public.login_status' as a LoginStatus.
//
// Generated from index 'login_status_pkey'.
func LoginStatusByID(db XODB, id int64) (*LoginStatus, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, account_id, login_type, token, expired_at ` +
		`FROM public.login_status ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	ls := LoginStatus{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ls.ID, &ls.AccountID, &ls.LoginType, &ls.Token, &ls.ExpiredAt)
	if err != nil {
		return nil, err
	}

	return &ls, nil
}

// LoginStatusByToken retrieves a row from 'public.login_status' as a LoginStatus.
//
// Generated from index 'login_status_token_idx'.
func LoginStatusByToken(db XODB, token sql.NullString) (*LoginStatus, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, account_id, login_type, token, expired_at ` +
		`FROM public.login_status ` +
		`WHERE token = $1`

	// run query
	XOLog(sqlstr, token)
	ls := LoginStatus{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, token).Scan(&ls.ID, &ls.AccountID, &ls.LoginType, &ls.Token, &ls.ExpiredAt)
	if err != nil {
		return nil, err
	}

	return &ls, nil
}
