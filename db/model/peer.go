// Package model contains the types for schema 'public'.
package model

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"fmt"

	"github.com/lib/pq"
)

// Peer represents a row from 'public.peers'.
type Peer struct {
	ID         int64          `json:"id"`          // id
	ChainID    sql.NullString `json:"chain_id"`    // chain_id
	Moniker    sql.NullString `json:"moniker"`     // moniker
	PeerID     sql.NullString `json:"peer_id"`     // peer_id
	ListenAddr sql.NullString `json:"listen_addr"` // listen_addr
	Network    sql.NullString `json:"network"`     // network
	Version    sql.NullString `json:"version"`     // version
	Channels   sql.NullString `json:"channels"`    // channels
	SendStart  pq.NullTime    `json:"send_start"`  // send_start
	RecvStart  pq.NullTime    `json:"recv_start"`  // recv_start
	CreatedAt  pq.NullTime    `json:"created_at"`  // created_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Peer exists in the database.
func (p *Peer) Exists() bool {
	return p._exists
}

// Deleted provides information if the Peer has been deleted from the database.
func (p *Peer) Deleted() bool {
	return p._deleted
}

// Insert inserts the Peer to the database.
func (p *Peer) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.peers (` +
		`chain_id, moniker, peer_id, listen_addr, network, version, channels, send_start, recv_start, created_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, p.ChainID, p.Moniker, p.PeerID, p.ListenAddr, p.Network, p.Version, p.Channels, p.SendStart, p.RecvStart, p.CreatedAt)
	err = db.QueryRow(sqlstr, p.ChainID, p.Moniker, p.PeerID, p.ListenAddr, p.Network, p.Version, p.Channels, p.SendStart, p.RecvStart, p.CreatedAt).Scan(&p.ID)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Update updates the Peer in the database.
func (p *Peer) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.peers SET (` +
		`chain_id, moniker, peer_id, listen_addr, network, version, channels, send_start, recv_start, created_at` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) WHERE id = $11`

	// run query
	XOLog(sqlstr, p.ChainID, p.Moniker, p.PeerID, p.ListenAddr, p.Network, p.Version, p.Channels, p.SendStart, p.RecvStart, p.CreatedAt, p.ID)
	_, err = db.Exec(sqlstr, p.ChainID, p.Moniker, p.PeerID, p.ListenAddr, p.Network, p.Version, p.Channels, p.SendStart, p.RecvStart, p.CreatedAt, p.ID)
	return err
}

// Save saves the Peer to the database.
func (p *Peer) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Insert(db)
}

// Upsert performs an upsert for Peer.
//
// NOTE: PostgreSQL 9.5+ only
func (p *Peer) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.peers (` +
		`id, chain_id, moniker, peer_id, listen_addr, network, version, channels, send_start, recv_start, created_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, chain_id, moniker, peer_id, listen_addr, network, version, channels, send_start, recv_start, created_at` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.chain_id, EXCLUDED.moniker, EXCLUDED.peer_id, EXCLUDED.listen_addr, EXCLUDED.network, EXCLUDED.version, EXCLUDED.channels, EXCLUDED.send_start, EXCLUDED.recv_start, EXCLUDED.created_at` +
		`)`

	// run query
	XOLog(sqlstr, p.ID, p.ChainID, p.Moniker, p.PeerID, p.ListenAddr, p.Network, p.Version, p.Channels, p.SendStart, p.RecvStart, p.CreatedAt)
	_, err = db.Exec(sqlstr, p.ID, p.ChainID, p.Moniker, p.PeerID, p.ListenAddr, p.Network, p.Version, p.Channels, p.SendStart, p.RecvStart, p.CreatedAt)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Delete deletes the Peer from the database.
func (p *Peer) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.peers WHERE id = $1`

	// run query
	XOLog(sqlstr, p.ID)
	_, err = db.Exec(sqlstr, p.ID)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

// PeersQuery returns offset-limit rows from 'public.peers' filte by filter,
// ordered by "id" in descending order.
func PeerFilter(db XODB, filter, sort string, offset, limit int64) ([]*Peer, error) {
	sqlstr := `SELECT ` +
		`id, chain_id, moniker, peer_id, listen_addr, network, version, channels, send_start, recv_start, created_at` +
		` FROM public.peers `

	if filter != "" {
		sqlstr = sqlstr + " WHERE " + filter
	}

	if sort != "" {
		sqlstr = sqlstr + " " + sort
	}

	if limit > 0 {
		sqlstr = sqlstr + fmt.Sprintf(" offset %d limit %d", offset, limit)
	}

	XOLog(sqlstr)
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*Peer
	for q.Next() {
		p := Peer{
			_exists: true,
		}

		// scan
		err = q.Scan(&p.ID, &p.ChainID, &p.Moniker, &p.PeerID, &p.ListenAddr, &p.Network, &p.Version, &p.Channels, &p.SendStart, &p.RecvStart, &p.CreatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &p)
	}

	return res, nil
}

// PeersByChainID retrieves a row from 'public.peers' as a Peer.
//
// Generated from index 'peers_chain_id_idx'.
func PeersByChainID(db XODB, chainID sql.NullString) ([]*Peer, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, chain_id, moniker, peer_id, listen_addr, network, version, channels, send_start, recv_start, created_at ` +
		`FROM public.peers ` +
		`WHERE chain_id = $1`

	// run query
	XOLog(sqlstr, chainID)
	q, err := db.Query(sqlstr, chainID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Peer{}
	for q.Next() {
		p := Peer{
			_exists: true,
		}

		// scan
		err = q.Scan(&p.ID, &p.ChainID, &p.Moniker, &p.PeerID, &p.ListenAddr, &p.Network, &p.Version, &p.Channels, &p.SendStart, &p.RecvStart, &p.CreatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &p)
	}

	return res, nil
}

// PeerByPeerID retrieves a row from 'public.peers' as a Peer.
//
// Generated from index 'peers_peer_id_idx'.
func PeerByPeerID(db XODB, peerID sql.NullString) (*Peer, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, chain_id, moniker, peer_id, listen_addr, network, version, channels, send_start, recv_start, created_at ` +
		`FROM public.peers ` +
		`WHERE peer_id = $1`

	// run query
	XOLog(sqlstr, peerID)
	p := Peer{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, peerID).Scan(&p.ID, &p.ChainID, &p.Moniker, &p.PeerID, &p.ListenAddr, &p.Network, &p.Version, &p.Channels, &p.SendStart, &p.RecvStart, &p.CreatedAt)
	if err != nil {
		return nil, err
	}

	return &p, nil
}

// PeerByID retrieves a row from 'public.peers' as a Peer.
//
// Generated from index 'peers_pkey'.
func PeerByID(db XODB, id int64) (*Peer, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, chain_id, moniker, peer_id, listen_addr, network, version, channels, send_start, recv_start, created_at ` +
		`FROM public.peers ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	p := Peer{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&p.ID, &p.ChainID, &p.Moniker, &p.PeerID, &p.ListenAddr, &p.Network, &p.Version, &p.Channels, &p.SendStart, &p.RecvStart, &p.CreatedAt)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
