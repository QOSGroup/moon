// Package model contains the types for schema 'public'.
package model

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// BlockChain represents a row from 'public.block_chain'.
type BlockChain struct {
	ID     int64          `json:"id"`     // id
	Height sql.NullInt64  `json:"height"` // height
	Data   sql.NullString `json:"data"`   // data

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the BlockChain exists in the database.
func (bc *BlockChain) Exists() bool {
	return bc._exists
}

// Deleted provides information if the BlockChain has been deleted from the database.
func (bc *BlockChain) Deleted() bool {
	return bc._deleted
}

// Insert inserts the BlockChain to the database.
func (bc *BlockChain) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if bc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.block_chain (` +
		`height, data` +
		`) VALUES (` +
		`$1, $2` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, bc.Height, bc.Data)
	err = db.QueryRow(sqlstr, bc.Height, bc.Data).Scan(&bc.ID)
	if err != nil {
		return err
	}

	// set existence
	bc._exists = true

	return nil
}

// Update updates the BlockChain in the database.
func (bc *BlockChain) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !bc._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if bc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.block_chain SET (` +
		`height, data` +
		`) = ( ` +
		`$1, $2` +
		`) WHERE id = $3`

	// run query
	XOLog(sqlstr, bc.Height, bc.Data, bc.ID)
	_, err = db.Exec(sqlstr, bc.Height, bc.Data, bc.ID)
	return err
}

// Save saves the BlockChain to the database.
func (bc *BlockChain) Save(db XODB) error {
	if bc.Exists() {
		return bc.Update(db)
	}

	return bc.Insert(db)
}

// Upsert performs an upsert for BlockChain.
//
// NOTE: PostgreSQL 9.5+ only
func (bc *BlockChain) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if bc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.block_chain (` +
		`id, height, data` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, height, data` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.height, EXCLUDED.data` +
		`)`

	// run query
	XOLog(sqlstr, bc.ID, bc.Height, bc.Data)
	_, err = db.Exec(sqlstr, bc.ID, bc.Height, bc.Data)
	if err != nil {
		return err
	}

	// set existence
	bc._exists = true

	return nil
}

// Delete deletes the BlockChain from the database.
func (bc *BlockChain) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !bc._exists {
		return nil
	}

	// if deleted, bail
	if bc._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.block_chain WHERE id = $1`

	// run query
	XOLog(sqlstr, bc.ID)
	_, err = db.Exec(sqlstr, bc.ID)
	if err != nil {
		return err
	}

	// set deleted
	bc._deleted = true

	return nil
}

// BlockChainsQuery returns offset-limit rows from 'public.block_chain' filte by filter,
// ordered by "id" in descending order.
func BlockChainFilter(db XODB, filter string, offset, limit int) ([]*BlockChain, error) {
	sqlstr := `SELECT ` +
		`id, height, data` +
		`FROM public.block_chain `

	if filter != "" {
		sqlstr = sqlstr + " WHERE " + filter
	}

	sqlstr = sqlstr + " order by id desc offset $1 limit $2"

	XOLog(sqlstr, offset, limit)
	q, err := db.Query(sqlstr, offset, limit)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*BlockChain
	for q.Next() {
		bc := BlockChain{}

		// scan
		err = q.Scan(&bc.ID, &bc.Height, &bc.Data)
		if err != nil {
			return nil, err
		}

		res = append(res, &bc)
	}

	return res, nil
} // BlockChainByHeight retrieves a row from 'public.block_chain' as a BlockChain.
//
// Generated from index 'block_chain_height_key'.
func BlockChainByHeight(db XODB, height sql.NullInt64) (*BlockChain, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, height, data ` +
		`FROM public.block_chain ` +
		`WHERE height = $1`

	// run query
	XOLog(sqlstr, height)
	bc := BlockChain{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, height).Scan(&bc.ID, &bc.Height, &bc.Data)
	if err != nil {
		return nil, err
	}

	return &bc, nil
}

// BlockChainByID retrieves a row from 'public.block_chain' as a BlockChain.
//
// Generated from index 'block_chain_pkey'.
func BlockChainByID(db XODB, id int64) (*BlockChain, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, height, data ` +
		`FROM public.block_chain ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	bc := BlockChain{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&bc.ID, &bc.Height, &bc.Data)
	if err != nil {
		return nil, err
	}

	return &bc, nil
}
