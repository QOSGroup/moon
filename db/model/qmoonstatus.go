// Package model contains the types for schema 'public'.
package model

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// QmoonStatus represents a row from 'public.qmoon_status'.
type QmoonStatus struct {
	ID    int64          `json:"id"`    // id
	Key   sql.NullString `json:"key"`   // key
	Value sql.NullString `json:"value"` // value

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the QmoonStatus exists in the database.
func (qs *QmoonStatus) Exists() bool {
	return qs._exists
}

// Deleted provides information if the QmoonStatus has been deleted from the database.
func (qs *QmoonStatus) Deleted() bool {
	return qs._deleted
}

// Insert inserts the QmoonStatus to the database.
func (qs *QmoonStatus) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if qs._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.qmoon_status (` +
		`key, value` +
		`) VALUES (` +
		`$1, $2` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, qs.Key, qs.Value)
	err = db.QueryRow(sqlstr, qs.Key, qs.Value).Scan(&qs.ID)
	if err != nil {
		return err
	}

	// set existence
	qs._exists = true

	return nil
}

// Update updates the QmoonStatus in the database.
func (qs *QmoonStatus) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !qs._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if qs._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.qmoon_status SET (` +
		`key, value` +
		`) = ( ` +
		`$1, $2` +
		`) WHERE id = $3`

	// run query
	XOLog(sqlstr, qs.Key, qs.Value, qs.ID)
	_, err = db.Exec(sqlstr, qs.Key, qs.Value, qs.ID)
	return err
}

// Save saves the QmoonStatus to the database.
func (qs *QmoonStatus) Save(db XODB) error {
	if qs.Exists() {
		return qs.Update(db)
	}

	return qs.Insert(db)
}

// Upsert performs an upsert for QmoonStatus.
//
// NOTE: PostgreSQL 9.5+ only
func (qs *QmoonStatus) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if qs._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.qmoon_status (` +
		`id, key, value` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, key, value` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.key, EXCLUDED.value` +
		`)`

	// run query
	XOLog(sqlstr, qs.ID, qs.Key, qs.Value)
	_, err = db.Exec(sqlstr, qs.ID, qs.Key, qs.Value)
	if err != nil {
		return err
	}

	// set existence
	qs._exists = true

	return nil
}

// Delete deletes the QmoonStatus from the database.
func (qs *QmoonStatus) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !qs._exists {
		return nil
	}

	// if deleted, bail
	if qs._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.qmoon_status WHERE id = $1`

	// run query
	XOLog(sqlstr, qs.ID)
	_, err = db.Exec(sqlstr, qs.ID)
	if err != nil {
		return err
	}

	// set deleted
	qs._deleted = true

	return nil
}

// QmoonStatussQuery returns offset-limit rows from 'public.qmoon_status' filte by filter,
// ordered by "id" in descending order.
func QmoonStatusFilter(db XODB, filter string, offset, limit int64) ([]*QmoonStatus, error) {
	sqlstr := `SELECT ` +
		`id, key, value` +
		` FROM public.qmoon_status `

	if filter != "" {
		sqlstr = sqlstr + " WHERE " + filter
	}

	sqlstr = sqlstr + " order by id desc offset $1 limit $2"

	XOLog(sqlstr, offset, limit)
	q, err := db.Query(sqlstr, offset, limit)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*QmoonStatus
	for q.Next() {
		qs := QmoonStatus{}

		// scan
		err = q.Scan(&qs.ID, &qs.Key, &qs.Value)
		if err != nil {
			return nil, err
		}

		res = append(res, &qs)
	}

	return res, nil
} // QmoonStatusByKey retrieves a row from 'public.qmoon_status' as a QmoonStatus.
//
// Generated from index 'qmoon_status_key_idx'.
func QmoonStatusByKey(db XODB, key sql.NullString) (*QmoonStatus, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, key, value ` +
		`FROM public.qmoon_status ` +
		`WHERE key = $1`

	// run query
	XOLog(sqlstr, key)
	qs := QmoonStatus{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, key).Scan(&qs.ID, &qs.Key, &qs.Value)
	if err != nil {
		return nil, err
	}

	return &qs, nil
}

// QmoonStatusByID retrieves a row from 'public.qmoon_status' as a QmoonStatus.
//
// Generated from index 'qmoon_status_pkey'.
func QmoonStatusByID(db XODB, id int64) (*QmoonStatus, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, key, value ` +
		`FROM public.qmoon_status ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	qs := QmoonStatus{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&qs.ID, &qs.Key, &qs.Value)
	if err != nil {
		return nil, err
	}

	return &qs, nil
}
