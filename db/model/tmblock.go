// Package model contains the types for schema 'public'.
package model

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"fmt"

	"github.com/lib/pq"
)

// TmBlock represents a row from 'public.tm_blocks'.
type TmBlock struct {
	ID        int64          `json:"id"`         // id
	ChainID   sql.NullString `json:"chain_id"`   // chain_id
	Height    sql.NullInt64  `json:"height"`     // height
	Data      sql.NullString `json:"data"`       // data
	CreatedAt pq.NullTime    `json:"created_at"` // created_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the TmBlock exists in the database.
func (tb *TmBlock) Exists() bool {
	return tb._exists
}

// Deleted provides information if the TmBlock has been deleted from the database.
func (tb *TmBlock) Deleted() bool {
	return tb._deleted
}

// Insert inserts the TmBlock to the database.
func (tb *TmBlock) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if tb._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.tm_blocks (` +
		`chain_id, height, data, created_at` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, tb.ChainID, tb.Height, tb.Data, tb.CreatedAt)
	err = db.QueryRow(sqlstr, tb.ChainID, tb.Height, tb.Data, tb.CreatedAt).Scan(&tb.ID)
	if err != nil {
		return err
	}

	// set existence
	tb._exists = true

	return nil
}

// Update updates the TmBlock in the database.
func (tb *TmBlock) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !tb._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if tb._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.tm_blocks SET (` +
		`chain_id, height, data, created_at` +
		`) = ( ` +
		`$1, $2, $3, $4` +
		`) WHERE id = $5`

	// run query
	XOLog(sqlstr, tb.ChainID, tb.Height, tb.Data, tb.CreatedAt, tb.ID)
	_, err = db.Exec(sqlstr, tb.ChainID, tb.Height, tb.Data, tb.CreatedAt, tb.ID)
	return err
}

// Save saves the TmBlock to the database.
func (tb *TmBlock) Save(db XODB) error {
	if tb.Exists() {
		return tb.Update(db)
	}

	return tb.Insert(db)
}

// Upsert performs an upsert for TmBlock.
//
// NOTE: PostgreSQL 9.5+ only
func (tb *TmBlock) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if tb._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.tm_blocks (` +
		`id, chain_id, height, data, created_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, chain_id, height, data, created_at` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.chain_id, EXCLUDED.height, EXCLUDED.data, EXCLUDED.created_at` +
		`)`

	// run query
	XOLog(sqlstr, tb.ID, tb.ChainID, tb.Height, tb.Data, tb.CreatedAt)
	_, err = db.Exec(sqlstr, tb.ID, tb.ChainID, tb.Height, tb.Data, tb.CreatedAt)
	if err != nil {
		return err
	}

	// set existence
	tb._exists = true

	return nil
}

// Delete deletes the TmBlock from the database.
func (tb *TmBlock) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !tb._exists {
		return nil
	}

	// if deleted, bail
	if tb._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.tm_blocks WHERE id = $1`

	// run query
	XOLog(sqlstr, tb.ID)
	_, err = db.Exec(sqlstr, tb.ID)
	if err != nil {
		return err
	}

	// set deleted
	tb._deleted = true

	return nil
}

// TmBlocksQuery returns offset-limit rows from 'public.tm_blocks' filte by filter,
// ordered by "id" in descending order.
func TmBlockFilter(db XODB, filter string, offset, limit int64) ([]*TmBlock, error) {
	sqlstr := `SELECT ` +
		`id, chain_id, height, data, created_at` +
		` FROM public.tm_blocks `

	if filter != "" {
		sqlstr = sqlstr + " WHERE " + filter
	}

	if limit > 0 {
		sqlstr = sqlstr + fmt.Sprintf(" offset %d limit %d", offset, limit)
	}

	XOLog(sqlstr)
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*TmBlock
	for q.Next() {
		tb := TmBlock{}

		// scan
		err = q.Scan(&tb.ID, &tb.ChainID, &tb.Height, &tb.Data, &tb.CreatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &tb)
	}

	return res, nil
}

// TmBlockByChainIDHeight retrieves a row from 'public.tm_blocks' as a TmBlock.
//
// Generated from index 'tm_blocks_chain_id_height_idx'.
func TmBlockByChainIDHeight(db XODB, chainID sql.NullString, height sql.NullInt64) (*TmBlock, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, chain_id, height, data, created_at ` +
		`FROM public.tm_blocks ` +
		`WHERE chain_id = $1 AND height = $2`

	// run query
	XOLog(sqlstr, chainID, height)
	tb := TmBlock{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, chainID, height).Scan(&tb.ID, &tb.ChainID, &tb.Height, &tb.Data, &tb.CreatedAt)
	if err != nil {
		return nil, err
	}

	return &tb, nil
}

// TmBlocksByChainID retrieves a row from 'public.tm_blocks' as a TmBlock.
//
// Generated from index 'tm_blocks_chain_id_idx'.
func TmBlocksByChainID(db XODB, chainID sql.NullString) ([]*TmBlock, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, chain_id, height, data, created_at ` +
		`FROM public.tm_blocks ` +
		`WHERE chain_id = $1`

	// run query
	XOLog(sqlstr, chainID)
	q, err := db.Query(sqlstr, chainID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*TmBlock{}
	for q.Next() {
		tb := TmBlock{
			_exists: true,
		}

		// scan
		err = q.Scan(&tb.ID, &tb.ChainID, &tb.Height, &tb.Data, &tb.CreatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &tb)
	}

	return res, nil
}

// TmBlockByID retrieves a row from 'public.tm_blocks' as a TmBlock.
//
// Generated from index 'tm_blocks_pkey'.
func TmBlockByID(db XODB, id int64) (*TmBlock, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, chain_id, height, data, created_at ` +
		`FROM public.tm_blocks ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	tb := TmBlock{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&tb.ID, &tb.ChainID, &tb.Height, &tb.Data, &tb.CreatedAt)
	if err != nil {
		return nil, err
	}

	return &tb, nil
}
