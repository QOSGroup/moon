// Package model contains the types for schema 'public'.
package model

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"fmt"
)

// NodeRoute represents a row from 'public.node_route'.
type NodeRoute struct {
	ID     int64          `json:"id"`      // id
	NodeID sql.NullInt64  `json:"node_id"` // node_id
	Route  sql.NullString `json:"route"`   // route
	Hidden sql.NullBool   `json:"hidden"`  // hidden

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the NodeRoute exists in the database.
func (nr *NodeRoute) Exists() bool {
	return nr._exists
}

// Deleted provides information if the NodeRoute has been deleted from the database.
func (nr *NodeRoute) Deleted() bool {
	return nr._deleted
}

// Insert inserts the NodeRoute to the database.
func (nr *NodeRoute) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if nr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.node_route (` +
		`node_id, route, hidden` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, nr.NodeID, nr.Route, nr.Hidden)
	err = db.QueryRow(sqlstr, nr.NodeID, nr.Route, nr.Hidden).Scan(&nr.ID)
	if err != nil {
		return err
	}

	// set existence
	nr._exists = true

	return nil
}

// Update updates the NodeRoute in the database.
func (nr *NodeRoute) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !nr._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if nr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.node_route SET (` +
		`node_id, route, hidden` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE id = $4`

	// run query
	XOLog(sqlstr, nr.NodeID, nr.Route, nr.Hidden, nr.ID)
	_, err = db.Exec(sqlstr, nr.NodeID, nr.Route, nr.Hidden, nr.ID)
	return err
}

// Save saves the NodeRoute to the database.
func (nr *NodeRoute) Save(db XODB) error {
	if nr.Exists() {
		return nr.Update(db)
	}

	return nr.Insert(db)
}

// Upsert performs an upsert for NodeRoute.
//
// NOTE: PostgreSQL 9.5+ only
func (nr *NodeRoute) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if nr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.node_route (` +
		`id, node_id, route, hidden` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, node_id, route, hidden` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.node_id, EXCLUDED.route, EXCLUDED.hidden` +
		`)`

	// run query
	XOLog(sqlstr, nr.ID, nr.NodeID, nr.Route, nr.Hidden)
	_, err = db.Exec(sqlstr, nr.ID, nr.NodeID, nr.Route, nr.Hidden)
	if err != nil {
		return err
	}

	// set existence
	nr._exists = true

	return nil
}

// Delete deletes the NodeRoute from the database.
func (nr *NodeRoute) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !nr._exists {
		return nil
	}

	// if deleted, bail
	if nr._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.node_route WHERE id = $1`

	// run query
	XOLog(sqlstr, nr.ID)
	_, err = db.Exec(sqlstr, nr.ID)
	if err != nil {
		return err
	}

	// set deleted
	nr._deleted = true

	return nil
}

// NodeRoutesQuery returns offset-limit rows from 'public.node_route' filte by filter,
// ordered by "id" in descending order.
func NodeRouteFilter(db XODB, filter string, offset, limit int64) ([]*NodeRoute, error) {
	sqlstr := `SELECT ` +
		`id, node_id, route, hidden` +
		` FROM public.node_route `

	if filter != "" {
		sqlstr = sqlstr + " WHERE " + filter
	}

	if limit > 0 {
		sqlstr = sqlstr + fmt.Sprintf(" offset %d limit %d", offset, limit)
	}

	XOLog(sqlstr)
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*NodeRoute
	for q.Next() {
		nr := NodeRoute{}

		// scan
		err = q.Scan(&nr.ID, &nr.NodeID, &nr.Route, &nr.Hidden)
		if err != nil {
			return nil, err
		}

		res = append(res, &nr)
	}

	return res, nil
}

// Node returns the Node associated with the NodeRoute's NodeID (node_id).
//
// Generated from foreign key 'node_route_node_id_fkey'.
func (nr *NodeRoute) Node(db XODB) (*Node, error) {
	return NodeByID(db, nr.NodeID.Int64)
}

// NodeRoutesByNodeID retrieves a row from 'public.node_route' as a NodeRoute.
//
// Generated from index 'node_route_node_id_idx'.
func NodeRoutesByNodeID(db XODB, nodeID sql.NullInt64) ([]*NodeRoute, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, node_id, route, hidden ` +
		`FROM public.node_route ` +
		`WHERE node_id = $1`

	// run query
	XOLog(sqlstr, nodeID)
	q, err := db.Query(sqlstr, nodeID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*NodeRoute{}
	for q.Next() {
		nr := NodeRoute{
			_exists: true,
		}

		// scan
		err = q.Scan(&nr.ID, &nr.NodeID, &nr.Route, &nr.Hidden)
		if err != nil {
			return nil, err
		}

		res = append(res, &nr)
	}

	return res, nil
}

// NodeRouteByID retrieves a row from 'public.node_route' as a NodeRoute.
//
// Generated from index 'node_route_pkey'.
func NodeRouteByID(db XODB, id int64) (*NodeRoute, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, node_id, route, hidden ` +
		`FROM public.node_route ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	nr := NodeRoute{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&nr.ID, &nr.NodeID, &nr.Route, &nr.Hidden)
	if err != nil {
		return nil, err
	}

	return &nr, nil
}
