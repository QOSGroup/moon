// Package model contains the types for schema 'public'.
package model

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// NodeTypeRoute represents a row from 'public.node_type_route'.
type NodeTypeRoute struct {
	ID         int64          `json:"id"`           // id
	NodeTypeID sql.NullInt64  `json:"node_type_id"` // node_type_id
	Route      sql.NullString `json:"route"`        // route
	Hidden     sql.NullBool   `json:"hidden"`       // hidden

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the NodeTypeRoute exists in the database.
func (ntr *NodeTypeRoute) Exists() bool {
	return ntr._exists
}

// Deleted provides information if the NodeTypeRoute has been deleted from the database.
func (ntr *NodeTypeRoute) Deleted() bool {
	return ntr._deleted
}

// Insert inserts the NodeTypeRoute to the database.
func (ntr *NodeTypeRoute) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ntr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.node_type_route (` +
		`node_type_id, route, hidden` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, ntr.NodeTypeID, ntr.Route, ntr.Hidden)
	err = db.QueryRow(sqlstr, ntr.NodeTypeID, ntr.Route, ntr.Hidden).Scan(&ntr.ID)
	if err != nil {
		return err
	}

	// set existence
	ntr._exists = true

	return nil
}

// Update updates the NodeTypeRoute in the database.
func (ntr *NodeTypeRoute) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ntr._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ntr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.node_type_route SET (` +
		`node_type_id, route, hidden` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE id = $4`

	// run query
	XOLog(sqlstr, ntr.NodeTypeID, ntr.Route, ntr.Hidden, ntr.ID)
	_, err = db.Exec(sqlstr, ntr.NodeTypeID, ntr.Route, ntr.Hidden, ntr.ID)
	return err
}

// Save saves the NodeTypeRoute to the database.
func (ntr *NodeTypeRoute) Save(db XODB) error {
	if ntr.Exists() {
		return ntr.Update(db)
	}

	return ntr.Insert(db)
}

// Upsert performs an upsert for NodeTypeRoute.
//
// NOTE: PostgreSQL 9.5+ only
func (ntr *NodeTypeRoute) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if ntr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.node_type_route (` +
		`id, node_type_id, route, hidden` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, node_type_id, route, hidden` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.node_type_id, EXCLUDED.route, EXCLUDED.hidden` +
		`)`

	// run query
	XOLog(sqlstr, ntr.ID, ntr.NodeTypeID, ntr.Route, ntr.Hidden)
	_, err = db.Exec(sqlstr, ntr.ID, ntr.NodeTypeID, ntr.Route, ntr.Hidden)
	if err != nil {
		return err
	}

	// set existence
	ntr._exists = true

	return nil
}

// Delete deletes the NodeTypeRoute from the database.
func (ntr *NodeTypeRoute) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ntr._exists {
		return nil
	}

	// if deleted, bail
	if ntr._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.node_type_route WHERE id = $1`

	// run query
	XOLog(sqlstr, ntr.ID)
	_, err = db.Exec(sqlstr, ntr.ID)
	if err != nil {
		return err
	}

	// set deleted
	ntr._deleted = true

	return nil
}

// NodeTypeRoutesQuery returns offset-limit rows from 'public.node_type_route' filte by filter,
// ordered by "id" in descending order.
func NodeTypeRouteFilter(db XODB, filter string, offset, limit int64) ([]*NodeTypeRoute, error) {
	sqlstr := `SELECT ` +
		`id, node_type_id, route, hidden` +
		` FROM public.node_type_route `

	if filter != "" {
		sqlstr = sqlstr + " WHERE " + filter
	}

	sqlstr = sqlstr + " order by id desc offset $1 limit $2"

	XOLog(sqlstr, offset, limit)
	q, err := db.Query(sqlstr, offset, limit)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*NodeTypeRoute
	for q.Next() {
		ntr := NodeTypeRoute{}

		// scan
		err = q.Scan(&ntr.ID, &ntr.NodeTypeID, &ntr.Route, &ntr.Hidden)
		if err != nil {
			return nil, err
		}

		res = append(res, &ntr)
	}

	return res, nil
} // NodeType returns the NodeType associated with the NodeTypeRoute's NodeTypeID (node_type_id).
//
// Generated from foreign key 'node_type_route_node_type_id_fkey'.
func (ntr *NodeTypeRoute) NodeType(db XODB) (*NodeType, error) {
	return NodeTypeByID(db, ntr.NodeTypeID.Int64)
}

// NodeTypeRoutesByNodeTypeID retrieves a row from 'public.node_type_route' as a NodeTypeRoute.
//
// Generated from index 'node_type_route_node_type_id_idx'.
func NodeTypeRoutesByNodeTypeID(db XODB, nodeTypeID sql.NullInt64) ([]*NodeTypeRoute, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, node_type_id, route, hidden ` +
		`FROM public.node_type_route ` +
		`WHERE node_type_id = $1`

	// run query
	XOLog(sqlstr, nodeTypeID)
	q, err := db.Query(sqlstr, nodeTypeID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*NodeTypeRoute{}
	for q.Next() {
		ntr := NodeTypeRoute{
			_exists: true,
		}

		// scan
		err = q.Scan(&ntr.ID, &ntr.NodeTypeID, &ntr.Route, &ntr.Hidden)
		if err != nil {
			return nil, err
		}

		res = append(res, &ntr)
	}

	return res, nil
}

// NodeTypeRouteByID retrieves a row from 'public.node_type_route' as a NodeTypeRoute.
//
// Generated from index 'node_type_route_pkey'.
func NodeTypeRouteByID(db XODB, id int64) (*NodeTypeRoute, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, node_type_id, route, hidden ` +
		`FROM public.node_type_route ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	ntr := NodeTypeRoute{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ntr.ID, &ntr.NodeTypeID, &ntr.Route, &ntr.Hidden)
	if err != nil {
		return nil, err
	}

	return &ntr, nil
}
