// Package model contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"fmt"

	"github.com/QOSGroup/qmoon/db/model"
	"github.com/lib/pq"
)

// AtmIPRecord represents a row from 'public.atm_ip_record'.
type AtmIPRecord struct {
	ID       int64          `json:"id"`       // id
	Chainid  sql.NullString `json:"chainid"`  // chainid
	IP       sql.NullString `json:"ip"`       // ip
	Amount   sql.NullInt64  `json:"amount"`   // amount
	Createat pq.NullTime    `json:"createat"` // createat

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AtmIPRecord exists in the database.
func (air *AtmIPRecord) Exists() bool {
	return air._exists
}

// Deleted provides information if the AtmIPRecord has been deleted from the database.
func (air *AtmIPRecord) Deleted() bool {
	return air._deleted
}

// Insert inserts the AtmIPRecord to the database.
func (air *AtmIPRecord) Insert(db model.XODB) error {
	var err error

	// if already exist, bail
	if air._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.atm_ip_record (` +
		`chainid, ip, amount, createat` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`

	// run query
	model.XOLog(sqlstr, air.Chainid, air.IP, air.Amount, air.Createat)
	err = db.QueryRow(sqlstr, air.Chainid, air.IP, air.Amount, air.Createat).Scan(&air.ID)
	if err != nil {
		return err
	}

	// set existence
	air._exists = true

	return nil
}

// Update updates the AtmIPRecord in the database.
func (air *AtmIPRecord) Update(db model.XODB) error {
	var err error

	// if doesn't exist, bail
	if !air._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if air._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.atm_ip_record SET (` +
		`chainid, ip, amount, createat` +
		`) = ( ` +
		`$1, $2, $3, $4` +
		`) WHERE id = $5`

	// run query
	model.XOLog(sqlstr, air.Chainid, air.IP, air.Amount, air.Createat, air.ID)
	_, err = db.Exec(sqlstr, air.Chainid, air.IP, air.Amount, air.Createat, air.ID)
	return err
}

// Save saves the AtmIPRecord to the database.
func (air *AtmIPRecord) Save(db model.XODB) error {
	if air.Exists() {
		return air.Update(db)
	}

	return air.Insert(db)
}

// Upsert performs an upsert for AtmIPRecord.
//
// NOTE: PostgreSQL 9.5+ only
func (air *AtmIPRecord) Upsert(db model.XODB) error {
	var err error

	// if already exist, bail
	if air._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.atm_ip_record (` +
		`id, chainid, ip, amount, createat` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, chainid, ip, amount, createat` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.chainid, EXCLUDED.ip, EXCLUDED.amount, EXCLUDED.createat` +
		`)`

	// run query
	model.XOLog(sqlstr, air.ID, air.Chainid, air.IP, air.Amount, air.Createat)
	_, err = db.Exec(sqlstr, air.ID, air.Chainid, air.IP, air.Amount, air.Createat)
	if err != nil {
		return err
	}

	// set existence
	air._exists = true

	return nil
}

// Delete deletes the AtmIPRecord from the database.
func (air *AtmIPRecord) Delete(db model.XODB) error {
	var err error

	// if doesn't exist, bail
	if !air._exists {
		return nil
	}

	// if deleted, bail
	if air._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.atm_ip_record WHERE id = $1`

	// run query
	model.XOLog(sqlstr, air.ID)
	_, err = db.Exec(sqlstr, air.ID)
	if err != nil {
		return err
	}

	// set deleted
	air._deleted = true

	return nil
}

// AtmIPRecordsQuery returns offset-limit rows from 'public.atm_ip_record' filte by filter,
// ordered by "id" in descending order.
func AtmIPRecordFilter(db model.XODB, filter, sort string, offset, limit int64) ([]*AtmIPRecord, error) {
	sqlstr := `SELECT ` +
		`id, chainid, ip, amount, createat` +
		` FROM public.atm_ip_record `

	if filter != "" {
		sqlstr = sqlstr + " WHERE " + filter
	}

	if sort != "" {
		sqlstr = sqlstr + " " + sort
	}

	if limit > 0 {
		sqlstr = sqlstr + fmt.Sprintf(" offset %d limit %d", offset, limit)
	}

	model.XOLog(sqlstr)
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*AtmIPRecord
	for q.Next() {
		air := AtmIPRecord{
			_exists: true,
		}

		// scan
		err = q.Scan(&air.ID, &air.Chainid, &air.IP, &air.Amount, &air.Createat)
		if err != nil {
			return nil, err
		}

		res = append(res, &air)
	}

	return res, nil
}

// AtmIPRecordByIPChainidCreateat retrieves a row from 'public.atm_ip_record' as a AtmIPRecord.
//
// Generated from index 'atm_ip_record_ip_chainid_createat_idx'.
func AtmIPRecordByIPChainidCreateat(db model.XODB, ip sql.NullString, chainid sql.NullString, createat pq.NullTime) (*AtmIPRecord, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, chainid, ip, amount, createat ` +
		`FROM public.atm_ip_record ` +
		`WHERE ip = $1 AND chainid = $2 AND createat = $3`

	// run query
	model.XOLog(sqlstr, ip, chainid, createat)
	air := AtmIPRecord{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, ip, chainid, createat).Scan(&air.ID, &air.Chainid, &air.IP, &air.Amount, &air.Createat)
	if err != nil {
		return nil, err
	}

	return &air, nil
}

// AtmIPRecordByID retrieves a row from 'public.atm_ip_record' as a AtmIPRecord.
//
// Generated from index 'atm_ip_record_pkey'.
func AtmIPRecordByID(db model.XODB, id int64) (*AtmIPRecord, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, chainid, ip, amount, createat ` +
		`FROM public.atm_ip_record ` +
		`WHERE id = $1`

	// run query
	model.XOLog(sqlstr, id)
	air := AtmIPRecord{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&air.ID, &air.Chainid, &air.IP, &air.Amount, &air.Createat)
	if err != nil {
		return nil, err
	}

	return &air, nil
}
